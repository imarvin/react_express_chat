{"version":3,"sources":["chat_json.js","components/MessageCard.js","contexts/AuthContext.js","components/Message.js","contexts/ChatContext.js","components/Messages.js","components/MessageForm.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["data","MessageCard","props","message","showCard","className","data-flip","date","ts","format","AuthContext","createContext","AuthContextProvider","Provider","value","isAuthenticated","authId","children","Message","user","useContext","isAuth","avatar","username","useState","setShowCard","onClick","data-id","id","data-is-auth","src","alt","real_name","fromNow","interval","ChatContext","ChatContextProvider","users","setUsers","messages","setMessages","useEffect","require","posts","console","log","postMessage","Messages","messagesEndRef","useRef","current","scrollIntoView","behavior","map","msg","find","key","ref","MessageForm","setMessage","charsLeft","setCharsLeft","onSubmit","e","preventDefault","trim","length","uuid","Date","now","name","placeholder","onChange","target","maxLength","required","type","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcecbff1.chunk.js","sourcesContent":["export const data = {\n  \"users\": [\n    {\n      \"id\": 0,\n      \"username\": \"betteruser0\",\n      \"real_name\": \"Better User\",\n      \"verified\": true\n    },\n    {\n      \"id\": 1,\n      \"username\": \"marymeeker\",\n      \"real_name\": \"Mary Meeker\",\n      \"verified\": true\n    },\n    {\n      \"id\": 2,\n      \"username\": \"ConanOBrien\",\n      \"real_name\": \"Conan O'Brien\",\n      \"verified\": true\n    },\n    {\n      \"id\": 3,\n      \"username\": \"baratunde\",\n      \"real_name\": \"Baratunde\",\n      \"verified\": false\n    }\n  ],\n\n  \"posts\": [\n    {\n      \"id\": 2374237842,\n      \"user\": 1,\n      \"message\": \"Spotify has grown to more than 60 million monthly active users, 15 million of whom are paying subscribers.\",\n      \"ts\": 1337774582\n    },\n    {\n      \"id\": 2374272076,\n      \"user\": 2,\n      \"message\": \"If I were in prison, I wouldn't ruin my spoon trying to tunnel out, because going without morning yogurt is its own prison.\",\n      \"ts\": 1337968739\n    },\n    {\n      \"id\": 4545435344,\n      \"user\": 3,\n      \"message\": \"Something beautiful happened in Cornwall. https://media.better.com/microblog/cornwall.jpg\",\n      \"ts\": 1461607139\n    },\n    {\n      \"id\": 4629293242,\n      \"user\": 2,\n      \"message\": \"Love this shot. Reminds me of the first time someone found me at the end of a rainbow holding a pot of gold.\",\n      \"ts\": 1478942943\n    }\n  ]\n  \n}\n","import React from 'react';\nimport Moment from 'react-moment';\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\n\nconst MessageCard = (props) => {\n    const { message, showCard } = props;\n    return (\n        <div className=\"chat__card\">\n            <div className=\"chat__card-container\" >\n                <div className=\"chat__card-flipper\" data-flip={showCard}>\n\n                    <div className=\"chat__card-front\">\n                        <div className=\"chat__message-content\">{message.message}</div>\n                    </div>\n\n                    <div className=\"chat__card-back\">\n                        <div className=\"chat__card-content\">\n                            <CalendarTodayIcon></CalendarTodayIcon> Active Since &nbsp;<Moment date={message.ts} format=\"MMM YYYY\"></Moment>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MessageCard;\n","import React, { createContext } from 'react';\n\nexport const AuthContext = createContext();\n\nconst AuthContextProvider = (props) => {\n    // normally this would come from an auth token\n    // user id of \"logged in\" user\n    const authId = 0; // user id of default \"logged in\" user\n    return (\n        <AuthContext.Provider value={{ isAuthenticated: true, authId }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthContextProvider;\n","import React, { useContext, useState } from 'react';\nimport MessageCard from './MessageCard';\nimport Moment from 'react-moment';\nimport { AuthContext } from '../contexts/AuthContext';\n\nconst Message = (props) => {\n    const { message, user } = props;\n    const { authId } = useContext(AuthContext);\n\n    const isAuth = message.user === authId;\n    const avatar = isAuth ? 'better-icon.svg' : `${user.username}.jpg`;\n\n    const [showCard, setShowCard] = useState(false);\n\n    return (\n        <>\n            {message &&\n                <li className=\"chat__message\" onClick={() => setShowCard(!showCard)} data-id={message.id} data-is-auth={isAuth} data-flip={showCard} >\n                    <div className=\"chat__message-avatar\">\n                        <img className=\"chat__message-avatar-img\" src={`./images/${avatar}`} alt={user.real_name} />\n                    </div>\n                    <div className=\"chat__message-wrapper\">\n                        <Moment className=\"chat__message-timestamp\" fromNow date={message.ts} interval={30000}></Moment>\n                        <div className=\"chat__message-user\">\n                            <span className=\"chat__message-realname\">{user.real_name}</span>\n                            <span className=\"chat__message-username\">@{user.username}</span>\n                        </div>\n                        <MessageCard message={message} showCard={showCard} />\n                    </div>\n                </li>\n            }\n        </>\n    )\n}\n\nexport default Message;","import React, { createContext, useState, useEffect } from 'react';\n//import { chatData } from '../chat_json';\n\nexport const ChatContext = createContext();\n\nconst ChatContextProvider = (props) => {\n  // by default this app uses backend express server to fetch and post data\n  // this can be changed to false in .env \n  const isExpress = process.env.REACT_APP_EXPRESS_SERVER === \"true\" ? true : false;\n\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n\n  // express server is running on a different address (localhost:5000)\n  //    I added a proxy in package.json which allows me to use \n  //    relative path in the fetch url.\n  const GET_URL = '/api/get/chat';\n  const POST_URL = '/api/post/chat';\n\n  // useEffect to fetch on first render\n  useEffect(() => {\n    if (isExpress) {\n      //express api endpoint for fetching chat data\n      const fetchData = async () => {\n        try {\n          // express api endpoint for fetching chat data\n          const res = await fetch(GET_URL);\n          const data = await res.json();\n          setUsers([...data.users]);\n          setMessages([...data.posts]);\n          console.log('data fetched', data);\n        } catch (error) {\n          // error message for bad get request\n          console.log('GET error,', error.message);\n        }\n      };\n      fetchData();\n    } else {\n      // fallback for client only with no backend api for get\n      //const data = chatData;\n      const { data } = require('../chat_json');\n      setUsers([...data.users]);\n      setMessages([...data.posts]);\n      console.log('data imported', data);\n    }\n  }, [isExpress]);\n\n  const postMessage = (message) => {\n    if (isExpress) {\n      fetch(POST_URL, {\n        method: 'POST',\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(message)\n      })\n        .then(res => {\n          if (res.ok) {\n            setMessages([...messages, { ...message }])\n          } else {\n            throw new Error('Oops! Something went wrong with the fetch.');\n          }\n        })\n        .catch(error => {\n          // error message for bad get request\n          console.log('POST error:', error.message);\n        });\n    } else {\n      // fall back for client-only with no backend api for post\n      setMessages([...messages, { ...message }])\n    }\n  };\n\n  return (\n    <ChatContext.Provider value={{ users, messages, postMessage }}>\n      {props.children}\n    </ChatContext.Provider>\n  )\n}\n\nexport default ChatContextProvider;\n","import React, { useContext, useEffect, useRef } from 'react';   \nimport Message from './Message';\nimport { ChatContext } from '../contexts/ChatContext';\n\nconst Messages = () => {\n    const { users, messages } = useContext(ChatContext);\n\n    // scroll chat container to bottom to see the latest chat entry\n    const messagesEndRef = useRef(null);\n    const scrollToBottom = () => {\n        messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n    };\n    useEffect(scrollToBottom, [messages]);\n\n    return (\n        <>\n            <ul className=\"chat__messages\">\n                {messages &&\n                    messages.map(msg => {\n                        // get user info\n                        const user = users.find(user => user.id === msg.user);\n                        return (\n                            <Message key={msg.id} message={msg} user={user} />\n                        )\n                    })\n                }\n            </ul>\n            <div ref={messagesEndRef} />\n        </>\n    )\n}\n\nexport default Messages;\n","import React, { useContext, useState } from 'react';\nimport uuid from 'uuid/v1';\nimport SendIcon from '@material-ui/icons/Send';\nimport { ChatContext } from '../contexts/ChatContext';\nimport { AuthContext } from '../contexts/AuthContext';\n\nconst MessageForm = () => {\n    const { postMessage } = useContext(ChatContext);\n    const { authId } = useContext(AuthContext);\n    const [ message, setMessage ] = useState('');\n    \n    // maximum number of characters for new chat entry\n    const maxLength = 140;\n    const [ charsLeft, setCharsLeft ] = useState(maxLength);\n\n    const onChangeHandler = (e) => {\n        e.preventDefault()\n        const { value } = e.target;\n        setCharsLeft(maxLength - value.length);\n        setMessage(value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // Message must include alphanumeric characters.\n        if (message.trim().length > 0) {\n            const msg = {\n                id: uuid(),\n                user: authId,\n                message: message,\n                ts: Date.now(),\n            };\n            postMessage(msg);\n        } else {\n            console.log('Form error: New message must include characters other than whitespace.');\n        }\n        // reset message\n        setMessage('');\n        setCharsLeft(maxLength);\n    }\n\n    return (\n        <div className=\"chat__form\">\n            <form className=\"chat__form-form\" onSubmit={handleSubmit} >\n                <span className=\"chat__form-chars\">{charsLeft}</span>\n                <input className=\"chat__form-input\" name=\"message\" placeholder=\"Whats happening?\" onChange={onChangeHandler} value={message} maxLength={maxLength} required />\n                <button className=\"chat__form-button\" type=\"submit\"><SendIcon></SendIcon></button>\n            </form>\n        </div>\n    )\n}\n\nexport default MessageForm;\n","import React from 'react';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\n\nconst Header = () => {\n    return (\n        <header className=\"chat__header\">\n            <div className=\"chat__logo\">\n                <AccountTreeIcon className=\"chat__logo-svg\"></AccountTreeIcon>\n            </div>\n            <div className=\"chat__header-status\">\n                (client only)\n            </div>\n        </header>\n    )\n}\n\nexport default Header;\n","// app.js\n\nimport React from 'react';\nimport Messages from './components/Messages';\nimport MessageForm from './components/MessageForm';\nimport ChatContextProvider from './contexts/ChatContext';\nimport AuthContextProvider from './contexts/AuthContext';\nimport Header from './components/Header';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <ChatContextProvider>\n        <AuthContextProvider>\n          <main className=\"chat\">\n            <Messages />\n            <MessageForm />\n          </main>\n        </AuthContextProvider>\n      </ChatContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}